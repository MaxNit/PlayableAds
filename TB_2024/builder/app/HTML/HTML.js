let path=require("path"),swig=require("gulp-swig"),gutil=require("gulp-util"),clean=require("gulp-clean"),concat=require("gulp-concat"),htmlmin=require("gulp-htmlmin");const gulp=require("gulp"),paths=require("../../config/paths"),{builderConfig:a,gameConfig:e,tempStoragePath:t}=require("../../config/builder/index"),{playableLangs:s,playableConfig:i,playableNumber:l,playableHash:n,titleKey:p,playbleCode:r,playableVersion:o,playableDistForTests:d}=require("../../config/playable");let ApiBuilder=require("./ApiBuilder"),buildStats=require("../BuildStats");class HTML{clean(){return new Promise(async(a,e)=>{gulp.src([paths.appDistProd,paths.appDistTest,paths.appDistDemo,],{read:!1,allowEmpty:!0}).pipe(clean({force:!0})).on("error",gutil.log).on("finish",function(){a()})})}buildProd(){let t=a.apiSettings,l=[];for(let n in t){if(t.hasOwnProperty(n)&&this.checkAPI(n)&&(!t[n].requireBaseSettings||e[t[n].requireBaseSettings]))(t[n].langs||s).forEach(async(a,e)=>{let s;s="adwords"===n?this.buildProdAdwords:this.buildProdApi;let p=[!1];i.GLOBAL_SETTINGS_PLAYABLE&&i.GLOBAL_SETTINGS_PLAYABLE.versions&&(p=i.GLOBAL_SETTINGS_PLAYABLE.versions),p.forEach(async e=>{let i={apiName:n,lang:a,playableEnvApiName:t[n].playableEnvApiName};l.push(s.call(this,i,e))})})}return new Promise(async(a,e)=>{await Promise.all(l),a()})}async build(){return await this.clean(),Promise.all([this.buildTests(),this.buildProd(),])}async buildProdApi(a,e){return new Promise(async(t,s)=>{await new ApiBuilder(this,a,e),t()})}async buildProdAdwords(e,t){return a.baseSettings.nameButtonStore,new Promise(async(a,s)=>{let i=[];for(let l=0;l<1;l++){let n={adSize:[320,480],buttonStore:!1,isGp:!1,isIos:!1};i.push(new ApiBuilder(this,Object.assign({},e,{extraData:Object.assign({},n,{adSize:[320,480]})}),t)),i.push(new ApiBuilder(this,Object.assign({},e,{extraData:Object.assign({},n,{adSize:[480,320]})}),t))}Promise.all(i),a()})}buildTests(){let a=this.getBaseSources(),t={lang:"en",isDis:!0,isTests:!0,titleKey:e.titleKey},s={},p=[];p.push(this.buildDemoFiles({sources:a,extraPlayableEnv:t,dist:d,data:s}));let o,c=r?`_${r}`:"";return i.GLOBAL_SETTINGS_PLAYABLE&&(i.GLOBAL_SETTINGS_PLAYABLE.versions&&(o=i.GLOBAL_SETTINGS_PLAYABLE.versions),i.GLOBAL_SETTINGS_PLAYABLE.code&&(c=`_${i.GLOBAL_SETTINGS_PLAYABLE.code}`)),(o=o||[{title:""}]).forEach(async(a,i)=>{let r=`${e.titleKey}_${n}`,o=`${l}${c}`,d=`index_v${i+1}.html`;a.title&&(d=`${a.title}.html`),p.push(this.buildDemoFiles({sources:[{src:"index.html",playableEnv:{apiName:"default",params:{showInstallButton:!0}},playable_version_settings:a,fileName:`${d}`}],extraPlayableEnv:t,dist:path.join(paths.appDistDemo,r,o),data:s}))}),new Promise(async(a,e)=>{await Promise.all(p),a()})}buildTestsDemoApi(){let e=[];return["mraid","dapi"].forEach(t=>{this.checkAPI(t)&&e.push(new ApiBuilder(this,{apiName:t,lang:"en",isDemo:!0,params:a.apiSettings[t].playableParams,dist:path.join(d,`API/${t}`)}))}),new Promise(async(a,t)=>{await Promise.all(e),a()})}buildTestsLangs(){let t=[{src:"index.html",playableEnv:{apiName:"default",params:{showInstallButton:!0}}}];if(this.checkAPI("adwords")){let i="adwords";t.push({src:"adwords.html",playableEnv:{apiName:i,params:a.apiSettings[i].playableParams}})}let l=[];return s.forEach(async s=>{"en"===s&&this.checkAPI("mraidamz")&&(t=t.concat([{src:"mraidamz.html",playableEnv:{apiName:"mraidAmz",params:a.apiSettings.mraidamz.playableParams},fileName:"amazon.html"}])),l.push(this.buildDemoFiles({sources:t,extraPlayableEnv:{lang:s,isTests:!0,isDis:!0,titleKey:e.titleKey},dist:path.join(d,"langs",s)}))}),new Promise(async(a,e)=>{await Promise.all(l),a()})}buildDemoFiles(a){let e=a.sources,t=a.defaultData||{};return new Promise(async(s,i)=>{let l=0;for(let n of e){let p=this.getData(n.playableEnv.apiName);Object.assign(p,t,{playableEnv:Object.assign({},a.extraPlayableEnv||{},n.playableEnv||{})}),await this.buildDemoFile({src:path.join(paths.ownSrc,`html/dev/${n.src}`),fileName:n.fileName,dist:a.dist,distCopy:a.distCopy,data:p,playable_version_settings:n.playable_version_settings}),++l===e.length&&s()}})}buildDemoFile(a){let e=a.src,t=a.dist,s=a.distCopy,i=a.data||{};return i.playable_version_settings=a.playable_version_settings||{},new Promise(async(l,n)=>{let p=gulp.src(e).pipe(swig({defaults:{autoescape:!0,cache:!1},data:i})).on("error",gutil.log).pipe(htmlmin({collapseWhitespace:!0}));a.fileName&&(p=p.pipe(concat(a.fileName))),p=p.pipe(gulp.dest(t)),s&&(p=p.pipe(gulp.dest(s))),p=p.on("finish",function(a){l()})})}checkAPI(e){return a.apiSettings[e]}getBaseSources(e=!1){let{apiSettings:t}=a,s=[];if(s.push({src:"index.html",playableEnv:{apiName:"default",params:{showInstallButton:!0}}}),t.adwords&&this.checkAPI("adwords")){let i="adwords";s.push({src:"adwords.html",playableEnv:{apiName:i,params:t[i].playableParams}})}if(!e&&t.dapi&&this.checkAPI("dapi")){let l="dapi";s.push({src:"dapi.html",playableEnv:{apiName:l,params:t[l].playableParams}})}return!e&&t.dapiiec&&this.checkAPI("dapiiec")&&s.push({src:"dapiiec.html",playableEnv:{apiName:"dapiIec",params:t.dapiiec.playableParams}}),s.push({src:"device.html",playableEnv:{apiName:"device"}}),s}getData(a){let e=require("../../config/builder/manifest"),t={apiName:a,configFile:e.getConfig(a),libsFile:e.getLibs(a),soundsFile:e.getSounds(a),baseImages:e.getBaseImages(a)};return Object.assign(t,this.getDefaultData()),t}getDefaultData(){return{number:l,tempStoragePath:t,nameGame:e.nameGame,titleKey:e.titleKey,googlePlay:e.googlePlay,googlePlayMarket:e.googlePlayMarket,appStore:e.appStore,amazon:e.amazon}}getTempStorage(a=""){return path.join(t,"HTML",a)}}module.exports=HTML;